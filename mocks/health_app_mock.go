// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/health/health.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/patrickchagastavares/StoneTest/model"
)

// MockHealthApp is a mock of App interface.
type MockHealthApp struct {
	ctrl     *gomock.Controller
	recorder *MockHealthAppMockRecorder
}

// MockHealthAppMockRecorder is the mock recorder for MockHealthApp.
type MockHealthAppMockRecorder struct {
	mock *MockHealthApp
}

// NewMockHealthApp creates a new mock instance.
func NewMockHealthApp(ctrl *gomock.Controller) *MockHealthApp {
	mock := &MockHealthApp{ctrl: ctrl}
	mock.recorder = &MockHealthAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthApp) EXPECT() *MockHealthAppMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockHealthApp) Ping(ctx context.Context) (*model.Health, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(*model.Health)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockHealthAppMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockHealthApp)(nil).Ping), ctx)
}
