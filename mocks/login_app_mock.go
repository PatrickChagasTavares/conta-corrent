// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/login/login.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	session "github.com/patrickchagastavares/conta-corrent/utils/session"
)

// MockLoginApp is a mock of App interface.
type MockLoginApp struct {
	ctrl     *gomock.Controller
	recorder *MockLoginAppMockRecorder
}

// MockLoginAppMockRecorder is the mock recorder for MockLoginApp.
type MockLoginAppMockRecorder struct {
	mock *MockLoginApp
}

// NewMockLoginApp creates a new mock instance.
func NewMockLoginApp(ctrl *gomock.Controller) *MockLoginApp {
	mock := &MockLoginApp{ctrl: ctrl}
	mock.recorder = &MockLoginAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginApp) EXPECT() *MockLoginAppMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockLoginApp) Login(ctx context.Context, cpf, secret string) (*session.SessionAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, cpf, secret)
	ret0, _ := ret[0].(*session.SessionAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockLoginAppMockRecorder) Login(ctx, cpf, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockLoginApp)(nil).Login), ctx, cpf, secret)
}
