// Code generated by MockGen. DO NOT EDIT.
// Source: ./utils/password/password.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPassword is a mock of Password interface.
type MockPassword struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordMockRecorder
}

// MockPasswordMockRecorder is the mock recorder for MockPassword.
type MockPasswordMockRecorder struct {
	mock *MockPassword
}

// NewMockPassword creates a new mock instance.
func NewMockPassword(ctrl *gomock.Controller) *MockPassword {
	mock := &MockPassword{ctrl: ctrl}
	mock.recorder = &MockPasswordMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPassword) EXPECT() *MockPasswordMockRecorder {
	return m.recorder
}

// Encode mocks base method.
func (m *MockPassword) Encode(password, salt string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", password, salt)
	ret0, _ := ret[0].(string)
	return ret0
}

// Encode indicates an expected call of Encode.
func (mr *MockPasswordMockRecorder) Encode(password, salt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockPassword)(nil).Encode), password, salt)
}

// Salt mocks base method.
func (m *MockPassword) Salt() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Salt")
	ret0, _ := ret[0].(string)
	return ret0
}

// Salt indicates an expected call of Salt.
func (mr *MockPasswordMockRecorder) Salt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Salt", reflect.TypeOf((*MockPassword)(nil).Salt))
}

// Verify mocks base method.
func (m *MockPassword) Verify(decoded, encoded, salt string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", decoded, encoded, salt)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockPasswordMockRecorder) Verify(decoded, encoded, salt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockPassword)(nil).Verify), decoded, encoded, salt)
}
