// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/transfer/transfer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/patrickchagastavares/conta-corrent/model"
)

// MockTransferApp is a mock of App interface.
type MockTransferApp struct {
	ctrl     *gomock.Controller
	recorder *MockTransferAppMockRecorder
}

// MockTransferAppMockRecorder is the mock recorder for MockTransferApp.
type MockTransferAppMockRecorder struct {
	mock *MockTransferApp
}

// NewMockTransferApp creates a new mock instance.
func NewMockTransferApp(ctrl *gomock.Controller) *MockTransferApp {
	mock := &MockTransferApp{ctrl: ctrl}
	mock.recorder = &MockTransferAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferApp) EXPECT() *MockTransferAppMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransferApp) Create(ctx context.Context, transfer *model.Transfer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, transfer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTransferAppMockRecorder) Create(ctx, transfer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransferApp)(nil).Create), ctx, transfer)
}

// ListByID mocks base method.
func (m *MockTransferApp) ListByID(ctx context.Context, accountID int) ([]*model.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByID", ctx, accountID)
	ret0, _ := ret[0].([]*model.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByID indicates an expected call of ListByID.
func (mr *MockTransferAppMockRecorder) ListByID(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByID", reflect.TypeOf((*MockTransferApp)(nil).ListByID), ctx, accountID)
}
