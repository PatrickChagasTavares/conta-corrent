// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/account/account.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/patrickchagastavares/conta-corrent/model"
)

// MockAccountApp is a mock of App interface.
type MockAccountApp struct {
	ctrl     *gomock.Controller
	recorder *MockAccountAppMockRecorder
}

// MockAccountAppMockRecorder is the mock recorder for MockAccountApp.
type MockAccountAppMockRecorder struct {
	mock *MockAccountApp
}

// NewMockAccountApp creates a new mock instance.
func NewMockAccountApp(ctrl *gomock.Controller) *MockAccountApp {
	mock := &MockAccountApp{ctrl: ctrl}
	mock.recorder = &MockAccountAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountApp) EXPECT() *MockAccountAppMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountApp) Create(ctx context.Context, account *model.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAccountAppMockRecorder) Create(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountApp)(nil).Create), ctx, account)
}

// GetBalanceByID mocks base method.
func (m *MockAccountApp) GetBalanceByID(ctx context.Context, id int) (*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalanceByID", ctx, id)
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalanceByID indicates an expected call of GetBalanceByID.
func (mr *MockAccountAppMockRecorder) GetBalanceByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalanceByID", reflect.TypeOf((*MockAccountApp)(nil).GetBalanceByID), ctx, id)
}

// GetByCpf mocks base method.
func (m *MockAccountApp) GetByCpf(ctx context.Context, cpf string) (*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCpf", ctx, cpf)
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCpf indicates an expected call of GetByCpf.
func (mr *MockAccountAppMockRecorder) GetByCpf(ctx, cpf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCpf", reflect.TypeOf((*MockAccountApp)(nil).GetByCpf), ctx, cpf)
}

// GetByID mocks base method.
func (m *MockAccountApp) GetByID(ctx context.Context, id int) (*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAccountAppMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAccountApp)(nil).GetByID), ctx, id)
}

// List mocks base method.
func (m *MockAccountApp) List(ctx context.Context) ([]*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAccountAppMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAccountApp)(nil).List), ctx)
}

// UpdateBalance mocks base method.
func (m *MockAccountApp) UpdateBalance(ctx context.Context, account *model.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockAccountAppMockRecorder) UpdateBalance(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockAccountApp)(nil).UpdateBalance), ctx, account)
}
